package com.fujitsu.cloudlab.order.api;

import com.fujitsu.cloudlab.commons.exception.ApiException;
import com.fujitsu.cloudlab.order.json.model.ErrorResponses;
import com.fujitsu.cloudlab.order.json.model.OrderResponse;
import com.fujitsu.cloudlab.order.service.OrderRetrieverService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Api(tags = {"OrderRetriever API"})
public class OrderRetrieverController {

  @Autowired OrderRetrieverService orderService;

  @GetMapping(
      path = "/orders/{orderId}",
      consumes = "application/json",
      produces = "application/json")
  @ApiOperation(
      value = "searches order by order id",
      nickname = "getOrder",
      notes =
          "By passing the right Order ID, you can search the Order from the persistent database.",
      response = OrderResponse.class,
      tags = {
        "reads",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "Order retrieved successfully",
            response = OrderResponse.class),
        @ApiResponse(
            code = 400,
            message =
                "Invalid Request. Mandatory data missing or invalid date format or any invalid input.",
            response = ErrorResponses.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponses.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorResponses.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponses.class),
        @ApiResponse(
            code = 415,
            message = "Unsupported MIME Type",
            response = ErrorResponses.class),
        @ApiResponse(code = 429, message = "Too many requests", response = ErrorResponses.class),
        @ApiResponse(
            code = 500,
            message = "Internal Server Error. System down or any runtime error.",
            response = ErrorResponses.class),
        @ApiResponse(
            code = 502,
            message =
                "Bad Gateway. Retuned when the gateway receives aninvalid response from the upstream server.",
            response = ErrorResponses.class),
        @ApiResponse(
            code = 503,
            message =
                "Service Unavailable. The server is currently unable to handle the request due to a temporary overloading or maintenance of the server",
            response = ErrorResponses.class),
        @ApiResponse(
            code = 504,
            message = "Gateway Timeout error.",
            response = ErrorResponses.class)
      })
  public OrderResponse getOrder(
      @ApiParam(value = "unique id of the order", required = true) @PathVariable("orderId")
          String orderId,
      @ApiParam(
              value = "A unique id for each request generated by each application",
              required = true)
          @RequestHeader(value = "transactionId", required = true)
          String transactionId)
      throws ApiException {
    return orderService.getOrderDetails(orderId);
  }
}
